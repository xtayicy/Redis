Why partitioning is useful
Partitioning in Redis serves two main goals:
It allows for much larger databases, using the sum of the memory of many computers. 
Without partitioning you are limited to the amount of memory a single computer can support.
It allows scaling the computational power to multiple cores and multiple computers, 
and the network bandwidth to multiple computers and network adapters.

Different implementations of partitioning
Partitioning can be the responsibility of different parts of a software stack.
Client side partitioning means that the clients directly select the right node where to write or read a given key. 
Many Redis clients implement client side partitioning.
Proxy assisted partitioning means that our clients send requests to a proxy that is able to speak the Redis protocol, 
instead of sending requests directly to the right Redis instance. 
The proxy will make sure to forward our request to the right Redis instance accordingly to the configured partitioning schema, 
and will send the replies back to the client. 
The Redis and Memcached proxy Twemproxy implements proxy assisted partitioning.
Query routing means that you can send your query to a random instance, 
and the instance will make sure to forward your query to the right node. 
Redis Cluster implements an hybrid form of query routing, 
with the help of the client (the request is not directly forwarded from a Redis instance to another, but the client gets redirected to the right node).

Disadvantages of partitioning
Some features of Redis don't play very well with partitioning:
Operations involving multiple keys are usually not supported. For instance you can't perform the intersection between two sets if they are stored in keys that are mapped to different Redis instances (actually there are ways to do this, but not directly).
Redis transactions involving multiple keys can not be used.
The partitioning granularity is the key, so it is not possible to shard a dataset with a single huge key like a very big sorted set.
When partitioning is used, data handling is more complex, for instance you have to handle multiple RDB / AOF files, 
and to make a backup of your data you need to aggregate the persistence files from multiple instances and hosts.
Adding and removing capacity can be complex. 
For instance Redis Cluster supports mostly transparent rebalancing of data with the ability to add and remove nodes at runtime, 
but other systems like client side partitioning and proxies don't support this feature. 
However a technique called Pre-sharding helps in this regard.

